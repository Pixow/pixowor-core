{"version":3,"file":"qing-core.js","sourceRoot":"","sources":["../../src/qing-core.ts"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,0CAA0C;AAC1C,+DAA+D;AAC/D,WAAW;AACX,cAAc;AACd,oBAAoB;AACpB,uBAAuB;AACvB,cAAc;AACd,qBAAqB;AACrB,uDAAuD;AACvD,qCAAqC;AAErC,yBAAyB;AACzB,yBAAyB;AACzB,qBAAqB;AACrB,mBAAmB;AACnB,IAAI;AAEJ,+BAA+B;AAC/B,yBAAyB;AACzB,eAAe;AACf,KAAK;AAEL,oEAAoE;AAEpE,8BAA8B;AAC9B,yBAAyB;AACzB,yBAAyB;AACzB,oBAAoB;AACpB,qBAAqB;AACrB,8BAA8B;AAC9B,wCAAwC;AACxC,0CAA0C;AAC1C,2BAA2B;AAC3B,4BAA4B;AAC5B,uBAAuB;AACvB,sBAAsB;AACtB,KAAK;AAEL,8BAA8B;AAC9B,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,wBAAwB;AACxB,IAAI;AAEJ,gBAAgB;AAChB,wBAAwB;AACxB,KAAK;AACL,0BAA0B;AAC1B,iDAAiD;AACjD,2DAA2D;AAC3D,+CAA+C;AAC/C,sCAAsC;AAEtC,oBAAoB;AACpB,MAAM;AAEN,6FAA6F;AAC7F,+CAA+C;AAC/C,8BAA8B;AAC9B,MAAM;AAEN,4CAA4C;AAC5C,+BAA+B;AAC/B,MAAM;AAEN,8EAA8E;AAC9E,iEAAiE;AACjE,gDAAgD;AAChD,aAAa;AACb,mFAAmF;AACnF,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,0BAA0B;AAC1B,0CAA0C;AAC1C,6EAA6E;AAC7E,MAAM;AAEN,0BAA0B;AAC1B,8BAA8B;AAC9B,iDAAiD;AACjD,cAAc;AACd,0EAA0E;AAC1E,0CAA0C;AAC1C,0CAA0C;AAC1C,0BAA0B;AAC1B,8BAA8B;AAC9B,uBAAuB;AACvB,eAAe;AAEf,4BAA4B;AAC5B,eAAe;AACf,WAAW;AACX,MAAM;AAEN,QAAQ;AACR,4BAA4B;AAC5B,qCAAqC;AACrC,sDAAsD;AACtD,QAAQ;AACR,6EAA6E;AAC7E,wDAAwD;AACxD,MAAM;AAEN,QAAQ;AACR,qBAAqB;AACrB,sBAAsB;AACtB,QAAQ;AACR,sDAAsD;AACtD,4DAA4D;AAC5D,MAAM;AAGN,0EAA0E;AAC1E,gFAAgF;AAChF,iFAAiF;AACjF,MAAM;AAEN,iDAAiD;AACjD,mEAAmE;AACnE,MAAM;AAEN,sCAAsC;AACtC,yBAAyB;AACzB,iCAAiC;AACjC,QAAQ;AACR,mBAAmB;AACnB,uDAAuD;AACvD,mBAAmB;AACnB,kBAAkB;AAClB,SAAS;AACT,MAAM;AAEN,uDAAuD;AACvD,0EAA0E;AAC1E,MAAM;AAEN,wDAAwD;AACxD,mEAAmE;AACnE,MAAM;AAEN,oCAAoC;AACpC,yDAAyD;AACzD,MAAM;AAEN,+CAA+C;AAC/C,qEAAqE;AACrE,MAAM;AAEN,2BAA2B;AAC3B,mDAAmD;AACnD,MAAM;AAEN,2BAA2B;AAC3B,mBAAmB;AACnB,2BAA2B;AAC3B,qBAAqB;AACrB,mBAAmB;AACnB,QAAQ;AACR,iBAAiB;AACjB,8EAA8E;AAC9E,SAAS;AACT,MAAM;AAEN,gEAAgE;AAChE,+EAA+E;AAC/E,MAAM;AAEN,kDAAkD;AAClD,yEAAyE;AACzE,MAAM;AAEN,qDAAqD;AACrD,4EAA4E;AAC5E,MAAM;AAEN,uDAAuD;AACvD,uEAAuE;AACvE,MAAM;AAEN,oDAAoD;AACpD,2EAA2E;AAC3E,MAAM;AAEN,4EAA4E;AAC5E,8DAA8D;AAC9D,mEAAmE;AACnE,8CAA8C;AAC9C,8CAA8C;AAC9C,UAAU;AACV,eAAe;AACf,yDAAyD;AACzD,4CAA4C;AAC5C,QAAQ;AACR,MAAM;AAEN,0CAA0C;AAC1C,+CAA+C;AAC/C,MAAM;AACN,sFAAsF;AAEtF,+EAA+E;AAC/E,qDAAqD;AACrD,sCAAsC;AACtC,yDAAyD;AACzD,eAAe;AACf,yCAAyC;AACzC,QAAQ;AACR,MAAM;AAEN,8BAA8B;AAC9B,8CAA8C;AAE9C,8BAA8B;AAE9B,YAAY;AACZ,iCAAiC;AACjC,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,iCAAiC;AACjC,oCAAoC;AACpC,MAAM;AACN,sFAAsF;AAEtF,sFAAsF;AACtF,gCAAgC;AAChC,iCAAiC;AACjC,MAAM;AAEN,qEAAqE;AACrE,kDAAkD;AAClD,MAAM;AAEN,uEAAuE;AACvE,sDAAsD;AACtD,MAAM;AAEN,sEAAsE;AACtE,gDAAgD;AAChD,MAAM;AAEN,sBAAsB;AACtB,8BAA8B;AAC9B,MAAM;AACN,sFAAsF;AAEtF,oDAAoD;AACpD,mDAAmD;AACnD,MAAM;AAEN,gEAAgE;AAChE,sCAAsC;AACtC,MAAM;AAEN,sCAAsC;AACtC,qCAAqC;AACrC,MAAM;AAEN,sFAAsF;AACtF,uDAAuD;AACvD,gDAAgD;AAChD,aAAa;AACb,8DAA8D;AAC9D,iBAAiB;AACjB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,oCAAoC;AACpC,gDAAgD;AAChD,aAAa;AACb,uEAAuE;AACvE,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,oCAAoC;AACpC,gDAAgD;AAChD,aAAa;AACb,+DAA+D;AAC/D,kBAAkB;AAClB,2CAA2C;AAC3C,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,gDAAgD;AAChD,gDAAgD;AAChD,aAAa;AACb,gEAAgE;AAChE,kBAAkB;AAClB,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,iDAAiD;AACjD,gDAAgD;AAChD,aAAa;AACb,iEAAiE;AACjE,kBAAkB;AAClB,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,oCAAoC;AACpC,gDAAgD;AAChD,aAAa;AACb,+DAA+D;AAC/D,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,gDAAgD;AAChD,gDAAgD;AAChD,aAAa;AACb,gEAAgE;AAChE,kBAAkB;AAClB,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,uDAAuD;AACvD,gDAAgD;AAChD,aAAa;AACb,mEAAmE;AACnE,iBAAiB;AACjB,oBAAoB;AACpB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,4DAA4D;AAC5D,sDAAsD;AACtD,4EAA4E;AAC5E,0BAA0B;AAC1B,YAAY;AAEZ,8CAA8C;AAE9C,aAAa;AACb,iEAAiE;AACjE,sBAAsB;AACtB,sBAAsB;AACtB,mBAAmB;AACnB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,0CAA0C;AAC1C,mDAAmD;AACnD,MAAM;AAEN,qDAAqD;AACrD,gDAAgD;AAChD,aAAa;AACb,gEAAgE;AAChE,oBAAoB;AACpB,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,6DAA6D;AAC7D,gDAAgD;AAChD,aAAa;AACb,+DAA+D;AAC/D,mBAAmB;AACnB,wBAAwB;AACxB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,iCAAiC;AACjC,gDAAgD;AAChD,aAAa;AACb,4DAA4D;AAC5D,kBAAkB;AAClB,aAAa;AACb,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAC7B,sBAAsB;AACtB,cAAc;AAEd,2BAA2B;AAC3B,cAAc;AACd,UAAU;AACV,MAAM;AAEN,sFAAsF;AAEtF,+FAA+F;AAE/F,kBAAkB;AAClB,iCAAiC;AACjC,0CAA0C;AAC1C,MAAM;AAEN,sCAAsC;AACtC,0CAA0C;AAC1C,MAAM;AACN,sFAAsF;AAEtF,uBAAuB;AACvB,+DAA+D;AAC/D,wCAAwC;AACxC,6BAA6B;AAC7B,6BAA6B;AAC7B,UAAU;AAEV,kCAAkC;AAElC,qBAAqB;AACrB,MAAM;AACN,IAAI","sourcesContent":["// import { MessageChannel as msgc } from \"electron-re\";\r\n// import QingApi, {Area} from \"qing-api\";\r\n// import { Component, Injectable, Type } from \"@angular/core\";\r\n// import {\r\n//   IOEvents,\r\n//   RendererEvents,\r\n//   RendererFunctions,\r\n//   UIEvents,\r\n// } from \"./events\";\r\n// import { Event, PluginStore } from \"./plugin-store\";\r\n// import { Plugin } from \"./plugin\";\r\n\r\n// export enum Severity {\r\n//   SUCCESS = \"success\",\r\n//   ERROR = \"error\",\r\n//   INFO = \"info\",\r\n// }\r\n\r\n// export type MsgcResponse = {\r\n//   error: Error | null;\r\n//   data: any;\r\n// };\r\n\r\n// export declare type Constructable<T> = new (...args: any[]) => T;\r\n\r\n// export type Environment = {\r\n//   production: boolean;\r\n//   environment: string;\r\n//   bucket: string;\r\n//   API_URL: string;\r\n//   WEB_RESOURCE_URI: string;\r\n//   TEST_GAME_CONFIG_IP_MOBILE: string;\r\n//   TEST_GAME_CONFIG_PORT_MOBILE: number;\r\n//   APP_DATA_PATH: string;\r\n//   USER_DATA_PATH: string;\r\n//   TEMP_PATH: string;\r\n//   APP_PATH: string;\r\n// };\r\n\r\n// export interface FileStat {\r\n//   type: string;\r\n//   path: string;\r\n//   file: string;\r\n//   files?: FileStat[];\r\n// }\r\n\r\n// @Injectable({\r\n//   providedIn: \"root\",\r\n// })\r\n// export class QingCore {\r\n//   static IoServiceName: string = \"io-service\";\r\n//   private pluginVariables = new Map<string, string[]>();\r\n//   private services = new Map<string, any>();\r\n//   private environment: Environment;\r\n\r\n//   constructor() {\r\n//   }\r\n\r\n//   /****************************** Environment Variables Api *****************************/\r\n//   public set Environment(env: Environment) {\r\n//     this.environment = env;\r\n//   }\r\n\r\n//   public get Environment(): Environment {\r\n//     return this.environment;\r\n//   }\r\n\r\n//   /********************************** I18N *******************************/\r\n//   public InstallI18n(translateObjs: { [k: string]: object }) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.INSTALLI18N, { translateObjs })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   // TODO: MOVE to qing\r\n//   public SetDefaultLang(lang: string) {\r\n//     msgc.invoke(QingCore.IoServiceName, IOEvents.SET_DEFAULT_LANG, {lang})\r\n//   }\r\n\r\n//   // TODO: MOVE to qing\r\n//   public GetDefaultLang() {\r\n//      return new Promise((resolve, reject) => {\r\n//        msgc\r\n//          .invoke(QingCore.IoServiceName, IOEvents.GET_DEFAULT_LANG, {})\r\n//          .then((res: MsgcResponse) => {\r\n//            const { error, data } = res;\r\n//            if (error) {\r\n//              reject(error);\r\n//              return;\r\n//            }\r\n\r\n//            resolve(data);\r\n//          });\r\n//      });\r\n//   }\r\n\r\n//   /**\r\n//    * 将angular的service实例注入\r\n//    * @param service AngularService\r\n//    * @param serviceInstance AngularService Instance\r\n//    */\r\n//   public InjectService<T>(service: Constructable<T>, serviceInstance: T) {\r\n//     this.services.set(service.name, serviceInstance);\r\n//   }\r\n\r\n//   /**\r\n//    * 获取某个Service实例\r\n//    * @param service\r\n//    */\r\n//   public GetService<T>(service: Constructable<T>) {\r\n//     return this.services.get((service as any).name) as T;\r\n//   }\r\n\r\n\r\n//   /****************************** UI Api *****************************/\r\n//   public RegistComponent(componentName: string, component: Type<Component>) {\r\n//     this.Invoke(RendererFunctions.REGIST_COMPONENT, componentName, component);\r\n//   }\r\n\r\n//   public GetComponent(componentName: string) {\r\n//     this.Invoke(RendererFunctions.GET_COMPONENT, componentName);\r\n//   }\r\n\r\n//   public RegistPlacementComponents(\r\n//     placement: string,\r\n//     component: Type<Component>\r\n//   ) {\r\n//     this.Invoke(\r\n//       RendererFunctions.REGIST_PLACEMENT_COMPONENTS,\r\n//       placement,\r\n//       component\r\n//     );\r\n//   }\r\n\r\n//   public GetPlacementComponents(placement: string) {\r\n//     this.Invoke(RendererFunctions.GET_PLACEMENT_COMPONENTS, placement);\r\n//   }\r\n\r\n//   public Toast(severity: Severity, message: string) {\r\n//     this.Emit(new Event(UIEvents.TOAST, { severity, message }));\r\n//   }\r\n\r\n//   public Alert(message: string) {\r\n//     this.Emit(new Event(UIEvents.ALERT, { message }));\r\n//   }\r\n\r\n//   public OpenDialog(componentName: string) {\r\n//     this.Emit(new Event(UIEvents.OPEN_DIALOG, { componentName }));\r\n//   }\r\n\r\n//   public CloseDialog() {\r\n//     this.Emit(new Event(UIEvents.CLOSE_DIALOG));\r\n//   }\r\n\r\n//   public ActivateInMenu(\r\n//     col: number,\r\n//     insertIndex: number,\r\n//     label: string,\r\n//     cb: Function\r\n//   ) {\r\n//     this.Emit(\r\n//       new Event(UIEvents.ACTIVATE_IN_MENU, { col, insertIndex, label, cb })\r\n//     );\r\n//   }\r\n\r\n//   public DeactivateInMenu(col: number, insertIndex: number) {\r\n//     this.Emit(new Event(UIEvents.DEACTIVATE_IN_MENU, { col, insertIndex }));\r\n//   }\r\n\r\n//   public LoadInSidebar(componentName: string) {\r\n//     this.Emit(new Event(UIEvents.LOAD_IN_SIDEBAR, { componentName }));\r\n//   }\r\n\r\n//   public LoadInEditorArea(componentName: string) {\r\n//     this.Emit(new Event(UIEvents.LOAD_IN_EDITORAREA, { componentName }));\r\n//   }\r\n\r\n//   public LoadInConsolePanel(componentName: string) {\r\n//     this.Emit(new Event(UIEvents.LOAD_IN_PANEL, { componentName }));\r\n//   }\r\n\r\n//   public LoadInWidgetBar(componentName: string) {\r\n//     this.Emit(new Event(UIEvents.LOAD_IN_WIDGETBAR, { componentName }));\r\n//   }\r\n\r\n//   public RegistVariable(pluginName: string, varName: string, data: any) {\r\n//     const variables = this.pluginVariables.get(pluginName);\r\n//     if (typeof variables === \"object\" && variables.length > 0) {\r\n//       if (variables.indexOf(varName) < 0) {\r\n//         this.registObserver(varName, data);\r\n//       }\r\n//     } else {\r\n//       this.pluginVariables.set(pluginName, [varName]);\r\n//       this.registObserver(varName, data);\r\n//     }\r\n//   }\r\n\r\n//   public GetVariable(varName: string) {\r\n//     return this.getObserver(varName) as any;\r\n//   }\r\n//   /*******************************************************************************/\r\n\r\n//   /****************************** Storage Api *****************************/\r\n//   public Set(key: string, data: string | object) {\r\n//     if (typeof data === \"object\") {\r\n//       localStorage.setItem(key, JSON.stringify(data));\r\n//     } else {\r\n//       localStorage.setItem(key, data);\r\n//     }\r\n//   }\r\n\r\n//   public Get(key: string) {\r\n//     const data = localStorage.getItem(key);\r\n\r\n//     if (!data) return null;\r\n\r\n//     try {\r\n//       return JSON.parse(data);\r\n//     } catch (error) {\r\n//       return data;\r\n//     }\r\n//   }\r\n\r\n//   public Remove(key: string) {\r\n//     localStorage.removeItem(key);\r\n//   }\r\n//   /*******************************************************************************/\r\n\r\n//   /****************************** Event Listener Api *****************************/\r\n//   public Emit(event: Event) {\r\n//     this.dispatchEvent(event);\r\n//   }\r\n\r\n//   public On(eventName: string, listener: (event: Event) => void) {\r\n//     this.addEventListener(eventName, listener);\r\n//   }\r\n\r\n//   public Once(eventName: string, listener: (event: Event) => void) {\r\n//     this.addOnceEventListener(eventName, listener);\r\n//   }\r\n\r\n//   public Off(eventName: string, listener: (event: Event) => void) {\r\n//     this.removeListener(eventName, listener);\r\n//   }\r\n\r\n//   public OffAll() {\r\n//     this.removeAllEvents();\r\n//   }\r\n//   /*******************************************************************************/\r\n\r\n//   public Invoke(funcName: string, ...args: any) {\r\n//     return this.execFunction(funcName, ...args);\r\n//   }\r\n\r\n//   public Bind(funcName: string, fn: (...args: any) => void) {\r\n//     this.addFunction(funcName, fn);\r\n//   }\r\n\r\n//   public UnBind(funcName: string) {\r\n//     this.removeFunction(funcName);\r\n//   }\r\n\r\n//   /****************************** IO Api *****************************************/\r\n//   public ListDir(dir: string): Promise<FileStat[]> {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.LISTDIR, {\r\n//           dir,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public RemoveDir(dir: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.REMOVEDIR, { dir })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public ReadFile(file: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.READFILE, {\r\n//           file,\r\n//           options: { encoding: \"utf8\" },\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public WriteFile(file: string, data: any) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.WRITEFILE, {\r\n//           file,\r\n//           data,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public RemoveFile(file: string, data: any) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.REMOVEFILE, {\r\n//           file,\r\n//           data,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public ReadJson(path: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.READJSON, {\r\n//           path,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public WriteJson(path: string, data: any) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.WRITEJSON, {\r\n//           path,\r\n//           data,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public DownloadFile(url: string, output: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.DOWNLOADFILE, {\r\n//           url,\r\n//           output,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public UploadFile(filePath: string, fileName: string) {\r\n//     return new Promise(async (resolve, reject) => {\r\n//       const qiniuTokenRes = await this.WebServiceSdk.util.getQiniuToken({\r\n//         name: fileName,\r\n//       });\r\n\r\n//       const { token } = qiniuTokenRes.data;\r\n\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.UPLOADFILE, {\r\n//           filePath,\r\n//           fileName,\r\n//           token,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public UploadFiles(files: string[]) {\r\n//     return new Promise((resolve, reject) => {});\r\n//   }\r\n\r\n//   public CopyFiles(source: string, dest: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.COPYFILES, {\r\n//           source,\r\n//           dest,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public ZipFiles(files: FileStat[], folderName: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.ZIPFILES, {\r\n//           files,\r\n//           folderName,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   public Unzip(file: string) {\r\n//     return new Promise((resolve, reject) => {\r\n//       msgc\r\n//         .invoke(QingCore.IoServiceName, IOEvents.UNZIP, {\r\n//           file,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n//   /*******************************************************************************/\r\n\r\n//   /****************************** Web Service Api *****************************************/\r\n\r\n//   // TODO: 区域变量\r\n//   public get WebServiceSdk() {\r\n//     return new QingApi({area: Area.CN})\r\n//   }\r\n\r\n//   public InitToken(token: string) {\r\n//     this.WebServiceSdk.setToken(token);\r\n//   }\r\n//   /*******************************************************************************/\r\n\r\n//   public Destroy() {\r\n//     const observers = Array.from(this.observerMap.values());\r\n//     observers.forEach((observer) => {\r\n//       observer.next(null);\r\n//       observer.complete();\r\n//     });\r\n\r\n//     super.removeAllListeners();\r\n\r\n//     this.OffAll();\r\n//   }\r\n// }\r\n"]}