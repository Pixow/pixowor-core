{"version":3,"file":"file-system-manager.js","sourceRoot":"","sources":["../../src/file-system-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { MessageChannel as msgc } from \"electron-re\";\r\nimport { FileSystemEvents } from \"./events\";\r\n\r\nexport interface FileStat {\r\n  type: string;\r\n  path: string;\r\n  file: string;\r\n  files?: FileStat[];\r\n}\r\n\r\nexport type MsgcResponse = {\r\n  error: Error | null;\r\n  data: any;\r\n};\r\n\r\nexport const IO_SERVICE = \"io-service\";\r\n\r\nexport class FileSystemManager {\r\n  public installI18n(translateObjs: { [k: string]: object }) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.INSTALL_I18N, { translateObjs })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public mkdir(dir: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.MKDIR, { dir })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public listDir(dir: string): Promise<FileStat[]> {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.LISTDIR, {\r\n          dir,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public removeDir(dir: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.REMOVEDIR, { dir })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public readFile(file: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.READFILE, {\r\n          file,\r\n          options: { encoding: \"utf8\" },\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public writeFile(file: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.WRITEFILE, {\r\n          file,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public removeFile(file: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.REMOVEFILE, {\r\n          file,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public readJson(path: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.READJSON, {\r\n          path,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public writeJson(path: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.WRITEJSON, {\r\n          path,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public downloadFile(url: string, output: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.DOWNLOADFILE, {\r\n          url,\r\n          output,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  //   public UploadFile(filePath: string, fileName: string) {\r\n  //     return new Promise(async (resolve, reject) => {\r\n  //       const qiniuTokenRes = await this.WebServiceSdk.util.getQiniuToken({\r\n  //         name: fileName,\r\n  //       });\r\n\r\n  //       const { token } = qiniuTokenRes.data;\r\n\r\n  //       msgc\r\n  //         .invoke(IO_SERVICE, IOEvents.UPLOADFILE, {\r\n  //           filePath,\r\n  //           fileName,\r\n  //           token,\r\n  //         })\r\n  //         .then((res: MsgcResponse) => {\r\n  //           const { error, data } = res;\r\n  //           if (error) {\r\n  //             reject(error);\r\n  //             return;\r\n  //           }\r\n\r\n  //           resolve(data);\r\n  //         });\r\n  //     });\r\n  //   }\r\n\r\n  public uploadFiles(files: string[]) {\r\n    return new Promise((resolve, reject) => {});\r\n  }\r\n\r\n  public copyFiles(source: string, dest: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.COPYFILES, {\r\n          source,\r\n          dest,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public zipFiles(files: FileStat[], folderName: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.ZIPFILES, {\r\n          files,\r\n          folderName,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public unzip(file: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(IO_SERVICE, FileSystemEvents.UNZIP, {\r\n          file,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n}\r\n"]}