{"version":3,"file":"file-system-manager.js","sourceRoot":"","sources":["../../src/file-system-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,IAAI,IAAI,EAAE,MAAM,aAAa,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAepC,MAAM,CAAC,IAAM,YAAY,GAAG,cAAc,CAAA;AAE1C;IAAA;IA0OA,CAAC;IAxOQ,mCAAO,GAAd,UAAe,GAAW;QACxB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,OAAO,EAAE;gBACtC,GAAG,KAAA;aACJ,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qCAAS,GAAhB,UAAiB,GAAW;QAC1B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE,EAAE,GAAG,KAAA,EAAE,CAAC;iBACjD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,oCAAQ,GAAf,UAAgB,IAAY;QAC1B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,QAAQ,EAAE;gBACvC,IAAI,MAAA;gBACJ,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;aAC9B,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qCAAS,GAAhB,UAAiB,IAAY,EAAE,IAAS;QACtC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE;gBACxC,IAAI,MAAA;gBACJ,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,sCAAU,GAAjB,UAAkB,IAAY,EAAE,IAAS;QACvC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,UAAU,EAAE;gBACzC,IAAI,MAAA;gBACJ,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,oCAAQ,GAAf,UAAgB,IAAY;QAC1B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,QAAQ,EAAE;gBACvC,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qCAAS,GAAhB,UAAiB,IAAY,EAAE,IAAS;QACtC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE;gBACxC,IAAI,MAAA;gBACJ,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wCAAY,GAAnB,UAAoB,GAAW,EAAE,MAAc;QAC7C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE;gBAC3C,GAAG,KAAA;gBACH,MAAM,QAAA;aACP,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEH,4DAA4D;IAC5D,sDAAsD;IACtD,4EAA4E;IAC5E,0BAA0B;IAC1B,YAAY;IAEZ,8CAA8C;IAE9C,aAAa;IACb,uDAAuD;IACvD,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;IACnB,aAAa;IACb,yCAAyC;IACzC,yCAAyC;IACzC,yBAAyB;IACzB,6BAA6B;IAC7B,sBAAsB;IACtB,cAAc;IAEd,2BAA2B;IAC3B,cAAc;IACd,UAAU;IACV,MAAM;IAEG,uCAAW,GAAlB,UAAmB,KAAe;QAChC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,IAAM,CAAC,CAAC,CAAC;IAC9C,CAAC;IAEM,qCAAS,GAAhB,UAAiB,MAAc,EAAE,IAAY;QAC3C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,EAAE;gBACxC,MAAM,QAAA;gBACN,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,oCAAQ,GAAf,UAAgB,KAAiB,EAAE,UAAkB;QACnD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,QAAQ,EAAE;gBACvC,KAAK,OAAA;gBACL,UAAU,YAAA;aACX,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,iCAAK,GAAZ,UAAa,IAAY;QACvB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI;iBACD,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,KAAK,EAAE;gBACpC,IAAI,MAAA;aACL,CAAC;iBACD,IAAI,CAAC,UAAC,GAAiB;gBACd,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;gBAC5B,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;iBACR;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IACH,wBAAC;AAAD,CAAC,AA1OD,IA0OC","sourcesContent":["import { MessageChannel as msgc } from \"electron-re\";\r\nimport { IOEvents } from \"./events\";\r\n\r\nexport interface FileStat {\r\n  type: string;\r\n  path: string;\r\n  file: string;\r\n  files?: FileStat[];\r\n}\r\n\r\nexport type MsgcResponse = {\r\n  error: Error | null;\r\n  data: any;\r\n};\r\n\r\n\r\nexport const FILE_SERVICE = \"file-service\"\r\n\r\nexport class FileSystemManager {\r\n\r\n  public ListDir(dir: string): Promise<FileStat[]> {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.LISTDIR, {\r\n          dir,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public RemoveDir(dir: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.REMOVEDIR, { dir })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public ReadFile(file: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.READFILE, {\r\n          file,\r\n          options: { encoding: \"utf8\" },\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public WriteFile(file: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.WRITEFILE, {\r\n          file,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public RemoveFile(file: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.REMOVEFILE, {\r\n          file,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public ReadJson(path: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.READJSON, {\r\n          path,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public WriteJson(path: string, data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.WRITEJSON, {\r\n          path,\r\n          data,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public DownloadFile(url: string, output: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.DOWNLOADFILE, {\r\n          url,\r\n          output,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n//   public UploadFile(filePath: string, fileName: string) {\r\n//     return new Promise(async (resolve, reject) => {\r\n//       const qiniuTokenRes = await this.WebServiceSdk.util.getQiniuToken({\r\n//         name: fileName,\r\n//       });\r\n\r\n//       const { token } = qiniuTokenRes.data;\r\n\r\n//       msgc\r\n//         .invoke(FILE_SERVICE, IOEvents.UPLOADFILE, {\r\n//           filePath,\r\n//           fileName,\r\n//           token,\r\n//         })\r\n//         .then((res: MsgcResponse) => {\r\n//           const { error, data } = res;\r\n//           if (error) {\r\n//             reject(error);\r\n//             return;\r\n//           }\r\n\r\n//           resolve(data);\r\n//         });\r\n//     });\r\n//   }\r\n\r\n  public UploadFiles(files: string[]) {\r\n    return new Promise((resolve, reject) => {});\r\n  }\r\n\r\n  public CopyFiles(source: string, dest: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.COPYFILES, {\r\n          source,\r\n          dest,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public ZipFiles(files: FileStat[], folderName: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.ZIPFILES, {\r\n          files,\r\n          folderName,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  public Unzip(file: string) {\r\n    return new Promise((resolve, reject) => {\r\n      msgc\r\n        .invoke(FILE_SERVICE, IOEvents.UNZIP, {\r\n          file,\r\n        })\r\n        .then((res: MsgcResponse) => {\r\n          const { error, data } = res;\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(data);\r\n        });\r\n    });\r\n  }\r\n}"]}