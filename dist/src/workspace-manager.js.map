{"version":3,"file":"workspace-manager.js","sourceRoot":"","sources":["../../src/workspace-manager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,YAAY,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,MAAM,CAAN,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,+BAAmB,CAAA;IACnB,2BAAe,CAAA;IACf,yBAAa,CAAA;AACf,CAAC,EAJW,QAAQ,KAAR,QAAQ,QAInB;AAGD,MAAM,CAAN,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;IACnB,wCAA0B,CAAA;IAC1B,qCAAuB,CAAA;IACvB,qCAAuB,CAAA;IACvB,6BAAe,CAAA;AACjB,CAAC,EAPW,UAAU,KAAV,UAAU,QAOrB;AAED;IAAA;IAAgC,CAAC;IAAD,wBAAC;AAAD,CAAC,AAAjC,IAAiC;;AAEjC;IAAA;IAA8B,CAAC;IAAD,sBAAC;AAAD,CAAC,AAA/B,IAA+B;;AAE/B;IAAA;IAA6B,CAAC;IAAD,qBAAC;AAAD,CAAC,AAA9B,IAA8B;;AAE9B;IAAsC,oCAAY;IAWhD;QAAA,YACE,iBAAO,SACR;QAZO,YAAM,GAAiC,IAAI,GAAG,EAGnD,CAAC;;IASJ,CAAC;IAEK,uCAAY,GAAlB;;;;KAAuB;IAEvB;;;;OAIG;IACI,gDAAqB,GAA5B,UAA6B,SAAiB,EAAE,SAA0B;QACxE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACI,2CAAgB,GAAvB,UAAwB,SAAiB;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,gCAAK,GAAZ,UAAa,QAAkB,EAAE,OAAe;QAC9C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACI,gCAAK,GAAZ,UAAa,OAAe;QAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACI,qCAAU,GAAjB,UAAkB,aAAqB,EAAE,MAAiC;QAAjC,uBAAA,EAAA,WAAiC;QACxE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,aAAa,eAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAC7D,CAAC;IACH,uBAAC;AAAD,CAAC,AA7DD,CAAsC,YAAY,GA6DjD","sourcesContent":["import { Component, Type } from \"@angular/core\";\r\nimport EventEmitter from \"events\";\r\nimport { UIEvents } from \"./events\";\r\n\r\nexport enum Severity {\r\n  SUCCESS = \"success\",\r\n  ERROR = \"error\",\r\n  INFO = \"info\",\r\n}\r\n\r\n\r\nexport enum Placements {\r\n  MENUBAR = \"menubar\",\r\n  SIDEBAR = \"sidebar\",\r\n  EDITORAREA = \"editor-area\",\r\n  WIDGETBAR = \"widgetbar\",\r\n  STATUSBAR = \"statusbar\",\r\n  TOAST = \"toast\"\r\n}\r\n\r\nexport class WorkspaceSidedock {}\r\n\r\nexport class WorkspaceRibbon {}\r\n\r\nexport class WorkspaceSplit {}\r\n\r\nexport class WorkspaceManager extends EventEmitter {\r\n  private _slots: Map<string, Type<Component>> = new Map<\r\n    string,\r\n    Type<Component>\r\n  >();\r\n  public leftSplit: WorkspaceSidedock;\r\n  public rightSplit: WorkspaceSidedock;\r\n  public leftRibbon: WorkspaceRibbon;\r\n  public rightRibbon: WorkspaceRibbon;\r\n  public rootSplit: WorkspaceSplit;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  async changeLayout() {}\r\n\r\n  /**\r\n   * Regist component in a slot\r\n   * @param placement - Placement name\r\n   * @param component - Slot component\r\n   */\r\n  public registerSlotComponent(placement: string, component: Type<Component>) {\r\n    this._slots.set(placement, component);\r\n  }\r\n\r\n  /**\r\n   * Get a slot component\r\n   * @param placement - Placement name\r\n   * @returns\r\n   */\r\n  public getSlotComponent(placement: string) {\r\n    return this._slots.get(placement);\r\n  }\r\n\r\n  /**\r\n   * Toast message\r\n   * @param severity - Message severity.\r\n   * @param message - Toast message.\r\n   */\r\n  public toast(severity: Severity, message: string) {\r\n    this.emit(UIEvents.TOAST, { severity, message });\r\n  }\r\n\r\n  /**\r\n   * Alert message\r\n   * @param severity - Message severity.\r\n   * @param message - Toast message.\r\n   */\r\n  public alert(message: string) {\r\n    this.emit(UIEvents.ALERT, { message });\r\n  }\r\n\r\n  /**\r\n   * Open a registed component in a dialog.\r\n   * @param componentName - Component name.\r\n   * @param config - Config data.\r\n   */\r\n  public openDialog(componentName: string, config: { [k: string]: any } = {}) {\r\n    this.emit(UIEvents.OPEN_DIALOG, { componentName, config });\r\n  }\r\n}\r\n\r\n"]}