{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/plugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAcpC,MAAM,CAAN,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,+BAAmB,CAAA;IACnB,2BAAe,CAAA;IACf,yBAAa,CAAA;AACf,CAAC,EAJW,QAAQ,KAAR,QAAQ,QAInB;AAkCD;IAIE,gBAAY,GAAQ,EAAE,QAAwB;QAC5C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAMD;;;OAGG;IACH,2BAAU,GAAV,UAAW,OAAgB;QACzB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,wBAAO,GAAP,UAAQ,KAAa,EAAE,QAAkB;QACvC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,kCAAiB,GAAjB,UAAkB,SAAoB;QACpC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,sBAAK,GAAL,UAAM,QAAkB,EAAE,OAAe;QACvC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,sBAAK,GAAL,UAAM,OAAe;QACnB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,2BAAU,GAAV,UAAW,aAAqB;QAC9B,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,aAAa,eAAA,EAAE,CAAC,CAAC;IACnE,CAAC;IACH,aAAC;AAAD,CAAC,AA3DD,IA2DC","sourcesContent":["import { Component, Type } from \"@angular/core\";\r\nimport { UIEvents } from \"./events\";\r\nimport { App } from \"./app\";\r\n\r\nexport interface PluginManifest {\r\n  id: string;\r\n  name: string;\r\n  author: string;\r\n  version: string;\r\n  description: string;\r\n  minAppVersion: string;\r\n  authorUrl?: string;\r\n  dependencies?: { [k: string]: string };\r\n}\r\n\r\nexport enum Severity {\r\n  SUCCESS = \"success\",\r\n  ERROR = \"error\",\r\n  INFO = \"info\",\r\n}\r\n\r\n/**\r\n * Mod = Cmd on MacOS and Ctrl on other OS\r\n * Ctrl = Ctrl key for every OS\r\n * Meta = Cmd on MacOS and Win key on other OS\r\n * @public\r\n */\r\nexport type Modifier = \"Mod\" | \"Ctrl\" | \"Meta\" | \"Shift\" | \"Alt\";\r\n\r\nexport interface Hotkey {\r\n  modifiers: Modifier[];\r\n  key: string;\r\n}\r\n\r\nexport interface Command {\r\n  /**\r\n   * Globally unique ID to identify this command\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Human friendly name for searching\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Simple callback, triggered globally\r\n   */\r\n  callback?: () => any;\r\n\r\n  hotkeys?: Hotkey[];\r\n}\r\n\r\nexport abstract class Plugin {\r\n  app: App;\r\n  manifest: PluginManifest;\r\n\r\n  constructor(app: App, manifest: PluginManifest) {\r\n    this.app = app;\r\n    this.manifest = manifest;\r\n  }\r\n\r\n  abstract install(): Promise<any>;\r\n  abstract activate(): void;\r\n  abstract deactivate(): void;\r\n\r\n  /**\r\n   * Register a command globally. The command id and name will be automatically prefixed with this plugin's id and name.\r\n   * @param command Command\r\n   */\r\n  addCommand(command: Command) {\r\n    this.app.services.registCommand(command);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} label - Menu label\r\n   * @param {Function} callback - The callback to trigger\r\n   */\r\n  addMenu(label: string, callback: Function) {\r\n    this.app.workspace.emit(UIEvents.ADD_MENU, { label, callback });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param  {string} name - Component\r\n   * @param  {Component} component - Register a angular component. The function will use component classname as key to regist.\r\n   */\r\n  registerComponent(component: Component) {\r\n    this.app.state.registerComponent(component);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Severity} severity - Message severity.\r\n   * @param {string} message - Toast message.\r\n   */\r\n  toast(severity: Severity, message: string) {\r\n    this.app.workspace.emit(UIEvents.TOAST, { severity, message });\r\n  }\r\n\r\n  alert(message: string) {\r\n    this.app.workspace.emit(UIEvents.ALERT, { message });\r\n  }\r\n\r\n  /**\r\n   * Open a component you registed in a dialog.\r\n   * @param {string} componentName - Component name.\r\n   */\r\n  openDialog(componentName: string) {\r\n    this.app.workspace.emit(UIEvents.OPEN_DIALOG, { componentName });\r\n  }\r\n}\r\n"]}