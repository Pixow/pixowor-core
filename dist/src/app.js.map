{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from \"src\";\r\nimport { FileSystemManager } from \"./file-system-manager\";\r\nimport { ServiceManager } from \"./service-manager\";\r\nimport { State } from \"./state\";\r\nimport { Workspace } from \"./workspace\";\r\nimport { diff, gte } from \"semver\";\r\n\r\nexport class App {\r\n  /**\r\n   * App version, sync with package version\r\n   */\r\n  private version: string;\r\n\r\n  workspace: Workspace = new Workspace();\r\n  fileSystemManager: FileSystemManager = new FileSystemManager();\r\n  state: State = new State();\r\n  services: ServiceManager = new ServiceManager();\r\n\r\n  constructor(version: string) {\r\n    this.version = version;\r\n  }\r\n\r\n  private dependencyValid(installedVersion: string, requiredVersion: string) {\r\n    const versionDiff = diff(installedVersion, requiredVersion);\r\n    return (\r\n      (versionDiff === null ||\r\n        versionDiff === \"patch\" ||\r\n        versionDiff === \"minor\") &&\r\n      gte(installedVersion, requiredVersion)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Install plugin, and check plugin dependencies has bee installed.\r\n   * @param plugin - The plugin need installed.\r\n   */\r\n  async installPlugin(plugin: Plugin) {\r\n    const { minAppVersion, dependencies } = plugin.manifest;\r\n\r\n    let installErrors: string[] = [];\r\n    if (!this.dependencyValid(this.version, minAppVersion)) {\r\n      installErrors.push(\r\n        `Plugin ${plugin.manifest.name} need minAppVersion ${minAppVersion}, but app version is ${this.version}!`\r\n      );\r\n    }\r\n\r\n    if (dependencies) {\r\n      for (const pluginName in dependencies) {\r\n        const requiredPluginVersion = dependencies[pluginName];\r\n        const installedPlugin = this.state.getPlugin(pluginName);\r\n\r\n        if (!installedPlugin) {\r\n          installErrors.push(`Plugin ${pluginName} has not installed`);\r\n        } else {\r\n          const installedPluginVersion = installedPlugin.manifest.version;\r\n\r\n          if (\r\n            !this.dependencyValid(installedPluginVersion, requiredPluginVersion)\r\n          ) {\r\n            installErrors.push(\r\n              `Plugin ${pluginName} need version ${requiredPluginVersion}, but ${installedPluginVersion} installed!`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (installErrors.length === 0) {\r\n      this.state.registerPlugin(plugin);\r\n      await plugin.install();\r\n    } else {\r\n      installErrors.forEach((err) => console.error(err));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate plugin that has been installed.\r\n   * @param {Plugin} plugin - The plugin need activate\r\n   */\r\n  public activatePlugin(plugin: Plugin) {\r\n    plugin.activate();\r\n  }\r\n\r\n  /**\r\n   * Deactivate plugin that has been installed.\r\n   * @param {string} id - The plugin id need deactivate\r\n   */\r\n  public deactivatePlugin(id: string) {\r\n    const plugin = this.state.getPlugin(id);\r\n\r\n    if (plugin) {\r\n      plugin.deactivate();\r\n    }\r\n  }\r\n}\r\n"]}