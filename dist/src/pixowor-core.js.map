{"version":3,"file":"pixowor-core.js","sourceRoot":"","sources":["../../src/pixowor-core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from \"./plugin\";\r\nimport { FileSystemManager } from \"./file-system-manager\";\r\nimport { ServiceManager } from \"./service-manager\";\r\nimport { StateManager } from \"./state-manager\";\r\nimport { WorkspaceManager } from \"./workspace-manager\";\r\nimport { diff, gte } from \"semver\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { StorageManager } from \"./storage-manager\";\r\nimport PixowApi, { Area } from \"pixow-api\";\r\n\r\nexport type Env = {\r\n  area: Area;\r\n  production: boolean;\r\n  environment: string;\r\n  bucket: string;\r\n  API_URL: string;\r\n  WEB_RESOURCE_URI: string;\r\n  TEST_GAME_CONFIG_IP_MOBILE: string;\r\n  TEST_GAME_CONFIG_PORT_MOBILE: number;\r\n  APP_DATA_PATH: string;\r\n  USER_DATA_PATH: string;\r\n  TEMP_PATH: string;\r\n  APP_PATH: string;\r\n};\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class PixoworCore {\r\n  /**\r\n   * App version, sync with package version\r\n   */\r\n  private version: string;\r\n\r\n  /**\r\n   * Record workspace data\r\n   */\r\n  public workspace: WorkspaceManager = new WorkspaceManager();\r\n\r\n  /**\r\n   * Filesystem\r\n   */\r\n  public fileSystemManager: FileSystemManager = new FileSystemManager();\r\n\r\n  /**\r\n   * State manage data\r\n   */\r\n  public stateManager: StateManager = new StateManager();\r\n\r\n  /**\r\n   * Service manager\r\n   */\r\n  public serviceManager: ServiceManager = new ServiceManager();\r\n\r\n  /**\r\n   * LocalStorage manager\r\n   */\r\n  public storageManager: StorageManager = new StorageManager();\r\n\r\n  public pixowApi: PixowApi;\r\n\r\n  private _environment: Env;\r\n\r\n  constructor(version: string, env: Env) {\r\n    this.version = version;\r\n\r\n    this._environment = env;\r\n\r\n    this.pixowApi = new PixowApi({ area: env.area });\r\n  }\r\n\r\n  /**\r\n   * Set pixow api token\r\n   * @param token - Get token from signin api\r\n   */\r\n  public setPixowApiToken(token: string) {\r\n    this.pixowApi.setToken(token);\r\n  }\r\n\r\n  public get environment() {\r\n    return this._environment\r\n  }\r\n\r\n  private dependencyValid(installedVersion: string, requiredVersion: string) {\r\n    const versionDiff = diff(installedVersion, requiredVersion);\r\n    return (\r\n      (versionDiff === null ||\r\n        versionDiff === \"patch\" ||\r\n        versionDiff === \"minor\") &&\r\n      gte(installedVersion, requiredVersion)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Install plugin, and check plugin dependencies has bee installed.\r\n   * @param plugin - The plugin need installed.\r\n   */\r\n  public async installPlugin(plugin: Plugin) {\r\n    const { minAppVersion, dependencies } = plugin;\r\n\r\n    let installErrors: string[] = [];\r\n    if (!this.dependencyValid(this.version, minAppVersion)) {\r\n      installErrors.push(\r\n        `Plugin ${plugin.name} need minAppVersion ${minAppVersion}, but app version is ${this.version}!`\r\n      );\r\n    }\r\n\r\n    if (dependencies) {\r\n      for (const pluginName in dependencies) {\r\n        const requiredPluginVersion = dependencies[pluginName];\r\n        const installedPlugin = this.stateManager.getPlugin(pluginName);\r\n\r\n        if (!installedPlugin) {\r\n          installErrors.push(`Plugin ${pluginName} has not installed`);\r\n        } else {\r\n          const installedPluginVersion = installedPlugin.version;\r\n\r\n          if (\r\n            !this.dependencyValid(installedPluginVersion, requiredPluginVersion)\r\n          ) {\r\n            installErrors.push(\r\n              `Plugin ${pluginName} need version ${requiredPluginVersion}, but ${installedPluginVersion} installed!`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (installErrors.length === 0) {\r\n      this.stateManager.registerPlugin(plugin);\r\n      await plugin.install();\r\n    } else {\r\n      installErrors.forEach((err) => console.error(err));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate plugin that has been installed.\r\n   * @param plugins - The plugin need activate\r\n   */\r\n  public activatePlugins(plugins: Plugin[]) {\r\n    \r\n    for (const plugin of plugins) {\r\n      this.stateManager.registerPlugin(plugin)\r\n      plugin.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate plugin that has been installed.\r\n   * @param {string} pid - The plugin id need deactivate\r\n   */\r\n  public deactivatePlugin(pid: string) {\r\n    const plugin = this.stateManager.getPlugin(pid);\r\n\r\n    if (plugin) {\r\n      plugin.deactivate();\r\n    }\r\n  }\r\n}\r\n"]}