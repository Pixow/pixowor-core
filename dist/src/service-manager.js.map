{"version":3,"file":"service-manager.js","sourceRoot":"","sources":["../../src/service-manager.ts"],"names":[],"mappings":"AAIA;;GAEG;AACH;IAAA;QACU,aAAQ,GAAG,IAAI,GAAG,EAAe,CAAC;QAClC,aAAQ,GAAG,IAAI,GAAG,EAAmB,CAAC;IAahD,CAAC;IAXC,sCAAa,GAAb,UAAiB,OAAyB,EAAE,eAAkB;QAC5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IACnD,CAAC;IAED,mCAAU,GAAV,UAAc,OAAyB;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACxC,CAAC;IAED,sCAAa,GAAb,UAAc,OAAgB;QAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IACH,qBAAC;AAAD,CAAC,AAfD,IAeC","sourcesContent":["import { Command } from \"./plugin\";\r\n\r\nexport declare type Constructable<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * Service Manager contain some angular component service and global command service.\r\n */\r\nexport class ServiceManager {\r\n  private services = new Map<string, any>();\r\n  private commands = new Map<string, Command>();\r\n\r\n  injectService<T>(service: Constructable<T>, serviceInstance: T) {\r\n    this.services.set(service.name, serviceInstance);\r\n  }\r\n\r\n  getService<T>(service: Constructable<T>): T {\r\n    return this.services.get(service.name)\r\n  }\r\n\r\n  registCommand(command: Command) {\r\n    this.commands.set(command.id, command);\r\n  }\r\n}\r\n"]}